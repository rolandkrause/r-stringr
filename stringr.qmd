  ---
title: "String manipulation"
subtitle: ""
author: "NN"
date: "2025-10-20"
---

> This tutorial aims to make you familiar with some of the functions of the `stringr` package and regular expressions. You can also try answering in Python. Use the `reticulate` package, which allows you to access R data and functions from Python. Simply run the setup below.


:::: {.columns}
::: {.column width="50%"}
R 
```{r}
#| label: setup
library(stringr)
library(readr)
library(reticulate)
```

:::
::: {.column width="50%"}
Python
```{python}
words = r.words 
```
:::
::::



## Text functions with `stringr` and Python. 

We will be using the `words` data that is built into `stringr`. 
The data set is available to you if you load the package.

:::: {.columns}
::: {.column width="50%"}
R
```{r}
length(words)
```
:::

::: {.column width="50%"}
Python
```{python}
len(words) 
```

:::
::::




##### Select words that contain a `y`

```{r}
# Write answer here
```

```{python}
# Write answer here
```


##### Retrieve a boolean vector that indicates which words end with `e`

Only use the first 10 words. 
```{r}
# Write answer here
```



##### Retrieve the indices for all words containing `ch` within the word. 

`ch` must not be present at the start or the end of the word. 

```{r}
# Write answer here
```


##### Extract the `y` and the previous character.

Use the function `unique()` around the results to avoid printing many empty matches or write a `for` loop in Python.

```{r}
# Write answer here
```



##### Get the lengths of the first ten words

Shorten the vector as needed.
```{r}
# Write answer here
```


## Viral research 

Read the genome sequence of the Hepatitis D virus: [hepd.fasta](https://biostat2.uni.lu/practicals/data/hepd.fasta).
For now, just execute the following:

```{r}
hepd <- readr::read_lines("data/hepd.fasta")
```

##### What is the length of the genome sequence? 

```{r}
# Write answer here
```


##### What is the sequence composition? How often does each character occur?

```{r}
# Write answer here
```


##### Find all motifs in the sequence

Find all matches of the sequence $ATG$ in the sequence. 

```{r}
# Write answer here
```


## Cheminformatics Research

Cheminformatics manipulations in R can be challenging, as there are many
string operations, also involving escape characters. 
These exercises give some brief insights into cheminformatics with strings, 
using a dataset of agrochemicals (pesticides) from PubChem. 

```{r read_data}
agro_data <- read_csv("data/PubChem_Agrochemicals_20231022.csv")
```

You can access data frames by quoted names with Python/reticulate 

```{python}
# Example
r.agro_data["annothits"]

```

#### How many of these agrochemicals are also drugs (pharmaceuticals)?
Look in the `annothits` column for entries that have the tag 
`Drug and Medication Information`.

```{r}
# Write answer here
```


#### How many agrochemicals have stereochemistry information?
Stereochemistry information is encoded in the `isosmiles` column and 
detected by looking for `@` or `\` or `/` symbols. 

```{r}
# Write answer here
```


#### What happens if you run this on the `canonicalsmiles` column instead?
What does this tell you about Canonical SMILES?

```{r}
# Write answer here
```


#### Return the `canonicalsmiles` of all agrochemicals containing a triple bond
Triple bonds are encoded by the `#` in the SMILES - canonical or isomeric.
Use `str_view` to look at those that are also salts (encoded by `.`) with `stringr` to inspect the results.



```{r}
# Write answer here
```


#### How many agrochemicals contain fluorine? 
Hint: look at the `mf` column
(molecular formula) and look for the element `F` but be careful, there
are also agrochemicals containing iron (`Fe`) as well. 
Look at the column contents to see how you can separate these entries. 

```{r}
# Write answer here
```


#### Generate a list of the names of agrochemicals that have been contributed by 
Luxembourg contributors. 
Use the `sidsrcname` column to detect Luxembourg. 

```{r}
# Write answer here
```


#### Finally, how many agrochemicals were contributed in 2023? 
Use the `cidcdate` column, which is in `YYYYMMDD` format. 

```{r}
# Write answer here

```

